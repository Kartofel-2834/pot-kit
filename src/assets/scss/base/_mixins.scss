/**
 * Миксин для типографики
 * добавить тип текста можно в $pot-text-sizes
 * добавить свойство текста можно в $pot-text-properties
 *
 * @param {String} $name - Имя размера текста
 */
@mixin text($name) {
    $font-styles: map-get($pot-text-sizes, $name);

    @for $index from 1 through length($pot-text-properties) {
        $value: nth($font-styles, $index);

        @if value != null {
            #{nth($pot-text-properties, $index)}: nth($font-styles, $index);
        }
    }
}

/**
 * Миксин для обрезки невмещающегося текста
 *
 * @param {Number} $line-clamp - Кол-во видимых строк
 */
@mixin text-ellipsis($line-clamp: null) {
    overflow: hidden;
    text-overflow: ellipsis;

    @if $line-clamp == null {
        display: block;
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: $line-clamp;
        line-clamp: $line-clamp;
    }
}

/**
 * Миксин для добавления шрифтов
 * Он генерирует правило @font-face с указанными параметрами
 *
 * @param {String} $alias - Псевдоним или имя для семейства шрифтов
 * @param {String} $name - Базовое имя файла шрифта без расширения
 * @param {Number} $weight - Вес шрифта (например, 400, 500, 700)
 * @param {String} $ext - Расширение файла шрифта (по умолчанию: 'ttf')
 */
@mixin font($alias, $name, $weight, $ext: 'ttf') {
    $format: map-get($pot-font-formats, $ext);

    @if $format == null {
        @error "Invalid font file extension: #{$ext}";
    }

    @font-face {
        font-family: $alias;
        src: url('/fonts/' + $name + '.' + $ext) format($format);
        font-weight: $weight;
        font-style: normal;
        font-display: swap;
    }
}

/**
 * Миксин для простого создания адаптивных стилей
 * Он генерирует медиа-запрос, который ориентируется на устройства с максимальной шириной экрана,
 * равной указанному брейкпоинту
 *
 * @param {String} $name - Имя брейкпоинта, к которому применяются стили
 * @param {Map} $bp - Карта брейкпоинтов экранов, где каждый ключ - это имя брейкпоинта
 */
@mixin respond-to($name, $bp: $breakpoints) {
    $max: get-map-value($name, $offset: 1, $map: $breakpoints) - 0.02;

    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

/**
 * То же, что и respond-to, но вставляет @media с min-width вместо max
 *
 * @param {String} $name - Имя брейкпоинта, к которому применяются стили
 * @param {Map} $bp - Карта брейкпоинтов экранов, где каждый ключ - это имя брейкпоинта
 */
@mixin respond-to-min($name, $bp: $breakpoints) {
    $min: get-map-value($name, $map: $breakpoints);

    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

/**
 * Миксин для быстрого описания базовых модификаторов компонента
 *
 * @param {String} $name - Имя модификатора
 * @param {String | null} $value - Значение модификатора
 */
@mixin modificator($name, $value: null) {
    @if $value != null {
        &:global(._#{$name}-#{$value}) {
            @content;
        }
    } @else {
        &:global(._#{$name}) {
            @content;
        }
    }
}

@mixin exclude-modificators($modificators-list) {
    @each $modificator in $modificators-list {
        &:not(:global(._#{$modificator})) {
            @content;
        }
    }
}

/** Миксин для использования цветовой темы */
@mixin setup-color-themes() {
    $themes-names-list: map-keys($pot-themes);

    @for $index from 1 through length($themes-names-list) {
        $theme-name: nth($themes-names-list, $index);
        $theme: map-get($pot-themes, $theme-name);
        $state-names-list: map-keys($theme);

        @include modificator(color, $theme-name) {
            @for $stateIndex from 1 through length($state-names-list) {
                $state-name: nth($state-names-list, $stateIndex);
                $state: map-get($theme, $state-name);
                $color-names-list: map-keys($state);

                @for $colorIndex from 1 through length($color-names-list) {
                    $color-name: nth($color-names-list, $colorIndex);
                    $color: map-get($state, $color-name);

                    --pot-theme-#{$state-name}-#{$color-name}: #{$color};
                }
            }

            @content;
        }
    }
}

/** Миксин для быстрой привязки настройки border-radius */
@mixin radius($target: null) {
    $keys-list: map-keys($pot-radius);

    @for $index from 1 through length($keys-list) {
        $key: nth($keys-list, $index);
        $value: map-get($pot-radius, $key);

        @include modificator(radius, $key) {
            @if $target != null {
                #{$target} {
                    border-radius: $value;
                }
            } @else {
                border-radius: $value;
            }
        }
    }
}

/** Миксин для быстрой привязки настройки border-radius */
@mixin gap($target: null) {
    $keys-list: map-keys($pot-gap);

    @for $index from 1 through length($keys-list) {
        $key: nth($keys-list, $index);
        $value: map-get($pot-gap, $key);

        @include modificator(gap, $key) {
            @if $target != null {
                #{$target} {
                    gap: $value;
                }
            } @else {
                gap: $value;
            }
        }
    }
}

/** Миксин для использования масштабируемых размеров в компонентах */
@mixin size($sizes-vars: null, $direction: up) {
    $sizes-list: map-keys($pot-size-scales);
    $vars-list: map-keys($sizes-vars);

    @for $index from 1 through length($sizes-list) {
        $size: nth($sizes-list, $index);
        $scale: map-get($pot-size-scales, $size);

        $current-size-vars: get-scaled-sizes-map($sizes-vars, $scale, 2px, $direction);

        @include modificator(size, $size) {
            @content ($current-size-vars, $size);
        }
    }
}
