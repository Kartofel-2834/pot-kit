/**
 * Миксин для типографики
 * добавить тип текста можно в $text-sizes
 * добавить свойство текста можно в $text-properties
 *
 * @param {String} $name - Имя размера текста
 */
@mixin text($name) {
    $font-styles: map-get($text-sizes, $name);

    @for $index from 1 through length($text-properties) {
        $value: nth($font-styles, $index);

        @if value != null {
            #{nth($text-properties, $index)}: nth($font-styles, $index);
        }
    }
}

/**
 * Миксин для обрезки невмещающегося текста
 *
 * @param {Number} $line-clamp - Кол-во видимых строк
 */
@mixin text-ellipsis($line-clamp: null) {
    overflow: hidden;
    text-overflow: ellipsis;

    @if $line-clamp == null {
        display: block;
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: $line-clamp;
        line-clamp: $line-clamp;
    }
}

/**
 * Миксин для добавления шрифтов
 * Он генерирует правило @font-face с указанными параметрами
 *
 * @param {String} $alias - Псевдоним или имя для семейства шрифтов
 * @param {String} $name - Базовое имя файла шрифта без расширения
 * @param {Number} $weight - Вес шрифта (например, 400, 500, 700)
 * @param {String} $ext - Расширение файла шрифта (по умолчанию: 'ttf')
 */
@mixin font($alias, $name, $weight, $ext: 'ttf') {
    $format: map-get($font-formats, $ext);

    @if $format == null {
        @error "Invalid font file extension: #{$ext}";
    }

    @font-face {
        font-family: $alias;
        src: url('/fonts/' + $name + '.' + $ext) format($format);
        font-weight: $weight;
        font-style: normal;
        font-display: swap;
    }
}

/**
 * Миксин для простого создания адаптивных стилей
 * Он генерирует медиа-запрос, который ориентируется на устройства с максимальной шириной экрана,
 * равной указанному брейкпоинту
 *
 * @param {String} $name - Имя брейкпоинта, к которому применяются стили
 * @param {Map} $bp - Карта брейкпоинтов экранов, где каждый ключ - это имя брейкпоинта
 */
@mixin respond-to($name, $bp: $breakpoints) {
    $max: get-map-value($name, $offset: 1, $map: $breakpoints) - 0.02;

    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

/**
 * То же, что и respond-to, но вставляет @media с min-width вместо max
 *
 * @param {String} $name - Имя брейкпоинта, к которому применяются стили
 * @param {Map} $bp - Карта брейкпоинтов экранов, где каждый ключ - это имя брейкпоинта
 */
@mixin respond-to-min($name, $bp: $breakpoints) {
    $min: get-map-value($name, $map: $breakpoints);

    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

/**
 * Миксин для быстрого описания базовых модификаторов компонента
 *
 * @param {String} $name - Имя модификатора
 * @param {String | null} $value - Значение модификатора
 */
@mixin modificator($name, $value: null) {
    @if $value != null {
        &:global(._#{$name}-#{$value}) {
            @content;
        }
    } @else {
        &:global(._#{$name}) {
            @content;
        }
    }
}

@mixin exclude-modificators($modificators-list) {
    @each $modificator in $modificators-list {
        &:not(:global(._#{$modificator})) {
            @content;
        }
    }
}

/** Миксин для быстрой привязки настройки border-radius */
@mixin radius($target: null) {
    @include modificator(radius, 'rounded-a') {
        @if $target != null {
            #{$target} {
                border-radius: var(--radius-a);
            }
        } @else {
            border-radius: var(--radius-a);
        }
    }

    @include modificator(radius, 'rounded-b') {
        @if $target != null {
            #{$target} {
                border-radius: var(--radius-b);
            }
        } @else {
            border-radius: var(--radius-b);
        }
    }

    @include modificator(radius, 'rounded-c') {
        @if $target != null {
            #{$target} {
                border-radius: var(--radius-c);
            }
        } @else {
            border-radius: var(--radius-c);
        }
    }

    @include modificator(radius, 'circle') {
        @if $target != null {
            #{$target} {
                border-radius: var(--radius-circle);
            }
        } @else {
            border-radius: var(--radius-circle);
        }
    }
}
